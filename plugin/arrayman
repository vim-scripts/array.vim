" help/tutorial for Vim plugin for multi-dimensional array manipulation
" Language:    vim script
" Maintainer:  Dave Silvia <dsilvia@mchsi.com>
" Date:        7/16/2004
"

let divideLine='-----------------------------------------------------'
command! Header :echo " " | echo "  " | echohl WildMenu | echon divideLine | execute 'echohl '.b:manDispColor | echo " "
command! Divider :echo " " | echo "  " | echohl DiffDelete | echon divideLine | execute 'echohl '.b:manDispColor | echo " "
highlight Safe ctermbg=Green guibg=Green ctermfg=Black guifg=Black term=standout
highlight Risky ctermbg=Red guibg=Red ctermfg=Black guifg=Black term=standout,reverse

Header
execute 'echohl '.b:manDispColor
echo "  The plugin "
execute 'echohl '.b:manEmphColor
echon "array.vim"
execute 'echohl '.b:manDispColor
echon " implements arrays.  Although a simple implementation,"
echo "  it addresses most basic array applications.  It is based on user defined"
echo "  commands (see "
execute 'echohl '.b:manCmdColor
echon ":h"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "40.2"
execute 'echohl '.b:manDispColor
echon ", "
execute 'echohl '.b:manCmdColor
echon ":h"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "user-commands"
execute 'echohl '.b:manDispColor
echon ", and "
execute 'echohl '.b:manCmdColor
echon ":h"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "command"
execute 'echohl '.b:manDispColor
echon ") that can be"
echo "  used both on the command line and in scripts.  These commands are"
echo "  a syntactical convenience to provide ease of use and readability.  For"
echo "  the more ambitious, functions called by these commands can be accessed"
echo "  directly.  The use and description of these functions will not be"
echo "  treated here.  From the command descriptions here, and reviewing the"
echo "  related command/function declaration/definition in "
execute 'echohl '.b:manEmphColor
echon "array.vim"
execute 'echohl '.b:manDispColor
echon ", function"
echo "  usage should be readily apparent."
echo " "
echo "  For quick reference, the command "
execute 'echohl '.b:manCmdColor
echon "ARRAYSYN"
execute 'echohl '.b:manDispColor
echon " displays the syntax for all"
echo "  commands.  For more detail with simple examples, use the command"
echo "  "
execute 'echohl '.b:manCmdColor
echon "ARRAYUSE"
execute 'echohl '.b:manDispColor
echon ".  Both of these have an optional command name argument which"
echo "  provides for the display of specific commands.  For example, "
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYSYN"
execute 'echohl '.b:manDispColor
echon "  "
execute 'echohl '.b:manArgColor
echon "ARRAYNEW"
execute 'echohl '.b:manDispColor
echo " "
echo "  will display syntax information on array creation."
Divider
echo "  To use an array, you must first create one.  The command "
execute 'echohl '.b:manCmdColor
echon "ARRAYNEW"
execute 'echohl '.b:manDispColor
echon " is"
echo "  used to do this.  The following describes how this is done and also"
echo "  gives general information on array basics as they apply."
echo "  The syntax of the command is:"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYNEW"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "decl"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "size"
execute 'echohl '.b:manDispColor
echon " ["
execute 'echohl '.b:manArgColor
echon "init"
execute 'echohl '.b:manDispColor
echon "] ["
execute 'echohl '.b:manArgColor
echon "s"
execute 'echohl '.b:manDispColor
echon "]"
echo " "
echo "  "
execute 'echohl '.b:manCmdColor
echon "ARRAYNEW"
execute 'echohl '.b:manDispColor
echon " takes 2 required arguments and 2 optional.  The required"
echo "  arguments are "
execute 'echohl '.b:manArgColor
echon "decl"
execute 'echohl '.b:manDispColor
echon " and "
execute 'echohl '.b:manArgColor
echon "size"
execute 'echohl '.b:manDispColor
echon ".  "
execute 'echohl '.b:manArgColor
echon "decl"
execute 'echohl '.b:manDispColor
echon " specifies the declared name of the"
echo "  array.  "
execute 'echohl '.b:manArgColor
echon "size"
execute 'echohl '.b:manDispColor
echon " declares the number and size of each dimension of the"
echo "  array.  An example is:"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYNEW"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "1:2:3:"
execute 'echohl '.b:manDispColor
echo " "
echo "  which creates an array named "
execute 'echohl '.b:manEmphColor
echon "b:array:"
execute 'echohl '.b:manDispColor
echon " in the current buffer.  The use of"
echo "  a scope specification letter in "
execute 'echohl '.b:manArgColor
echon "decl"
execute 'echohl '.b:manDispColor
echon " is necessary and typical of all"
echo "  array commands.  The only letters which may be used are "
execute 'echohl '.b:manEmphColor
echon "b w g"
execute 'echohl '.b:manDispColor
echon " for"
echo "  "
execute 'echohl '.b:manEmphColor
echon "b"
execute 'echohl '.b:manDispColor
echon "uffer, "
execute 'echohl '.b:manEmphColor
echon "w"
execute 'echohl '.b:manDispColor
echon "indow, and "
execute 'echohl '.b:manEmphColor
echon "g"
execute 'echohl '.b:manDispColor
echon "lobal, respectively.  Other letters cannot be used"
echo "  as their scopes will not be recognized in the function environment(s)"
echo "  the command(s) call."
echo " "
echo "  The dimension/size specifier tells "
execute 'echohl '.b:manCmdColor
echon "ARRAYNEW"
execute 'echohl '.b:manDispColor
echon " how many dimensions there"
echo "  are and the size of each.  Arrays are filled in "
execute 'echohl '.b:manEmphColor
echon "row major"
execute 'echohl '.b:manDispColor
echon ", meaning the"
echo "  "
execute 'echohl '.b:manEmphColor
echon "row"
execute 'echohl '.b:manDispColor
echon " is filled, column by column.  Here the term "
execute 'echohl '.b:manEmphColor
echon "row"
execute 'echohl '.b:manDispColor
echon " is relative and"
echo "  only has the classic meaning in a 2 dimensional array.  In the example,"
echo "  you may think of the row as being of one dimension with 2 X 3 columns,"
echo "  or you may think of the row as being of two dimensions with 3 columns."
echo "  Either way, the result is the same, the filling order is 0:0:0:, 0:0:1:,"
echo "  0:0:2:, 0:1:0:, 0:1:1:, 0:1:2:.  This is also a good place to point out"
echo "  that arrays are base 0, however, the size specification base is 1."
echo " "
echo "  "
execute 'echohl '.b:manArgColor
echon "init"
execute 'echohl '.b:manDispColor
echon " specifies an optional list of initialization values.  It can come"
echo "  in two flavors: a comma separated list, or a string.  If it is in the"
echo "  form of a string, the optional argument "
execute 'echohl '.b:manArgColor
echon "s"
execute 'echohl '.b:manDispColor
echon " must be used."
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYNEW"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "1:2:3:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "1,2,3,4,5,6"
execute 'echohl '.b:manDispColor
echo " "
echo "  Creates an array initialized to the values specified, in the order"
echo "  specified.  The array consists of 6 elements and there are 6 values, so"
echo "  the array is fully populated."
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYNEW"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "1:2:3:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "1,2,3"
execute 'echohl '.b:manDispColor
echo " "
echo "  This time there are only 3 values, so the array is not fully populated."
echo "  What are the remaining elements?  By default,  they are '"
execute 'echohl '.b:manEmphColor
echon "<Nul>"
execute 'echohl '.b:manDispColor
echon "'.  To"
echo "  change this default, use "
execute 'echohl '.b:manCmdColor
echon "let"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "g:arrayInitVal"
execute 'echohl '.b:manCmdColor
echon "="
execute 'echohl '.b:manEmphColor
echon "[your-choice]"
execute 'echohl '.b:manDispColor
echon "."
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYNEW"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "1:2:3:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "my,array"
execute 'echohl '.b:manDispColor
echo " "
echo "  First 2 elements of the array are '"
execute 'echohl '.b:manEmphColor
echon "my"
execute 'echohl '.b:manDispColor
echon "' and '"
execute 'echohl '.b:manEmphColor
echon "array"
execute 'echohl '.b:manDispColor
echon "' with the remaining"
echo "  4 set to '"
execute 'echohl '.b:manEmphColor
echon "<Nul>"
execute 'echohl '.b:manDispColor
echon "'."
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYNEW"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "2:2:3:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "m,y,\\ ,a,r,r,a,y"
execute 'echohl '.b:manDispColor
echo " "
echo "  Elements 0:0:0: thru 1:0:1: are user initialized, 1:0:2: thru 1:1:2:"
echo "  are defaulted."
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "let"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:why"
execute 'echohl '.b:manCmdColor
echon "="
execute 'echohl '.b:manEmphColor
echon "'y'"
execute 'echohl '.b:manDispColor
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYNEW"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "2:2:3:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "m,b:why,\\ ,a,r,r,a,b:why"
execute 'echohl '.b:manDispColor
echo " "
echo "  Gives the same result as the previous example."
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYNEW"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "1:2:3:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "my\\ array"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "s"
execute 'echohl '.b:manDispColor
echo " "
echo "  A third way to populate the first 8 elements."
echo " "
echo "  A few words about "
execute 'echohl '.b:manEmphColor
echon "string"
execute 'echohl '.b:manDispColor
echon "s vs. "
execute 'echohl '.b:manEmphColor
echon "string literal"
execute 'echohl '.b:manDispColor
echon "s.  In arrays, the"
echo "  difference is that a "
execute 'echohl '.b:manEmphColor
echon "string"
execute 'echohl '.b:manDispColor
echon " is stored without quotation marks while"
echo "  a "
execute 'echohl '.b:manEmphColor
echon "string literal"
execute 'echohl '.b:manDispColor
echon " is stored with them (as supplied by the user).  So the"
echo "  difference between"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYNEW"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "1:2:3:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "my\\ array"
execute 'echohl '.b:manDispColor
echo " "
echo "  and"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYNEW"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "1:2:3:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "'my\\ array'"
execute 'echohl '.b:manDispColor
echo " "
echo "  is that the first is stored without quotation marks, while the second"
echo "  is stored with them (in this case, single quotation marks).  In both"
echo "  instances, the first element of the array is initialized."
Divider
echo "  Now to comment on how to use the elements of the array.  The values can"
echo "  be used as any variable.  When used as the right hand side ("
execute 'echohl '.b:manArgColor
echon "rhs"
execute 'echohl '.b:manDispColor
echon ") of an"
echo "  expression, they can be employed with impunity.  The expression"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "let"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "ltrM"
execute 'echohl '.b:manCmdColor
echon "="
execute 'echohl '.b:manEmphColor
echon "b:array:0:0:0:"
execute 'echohl '.b:manDispColor
echo " "
echo "  assigns the letter '"
execute 'echohl '.b:manEmphColor
echon "m"
execute 'echohl '.b:manDispColor
echon "' from the above created array to the variable "
execute 'echohl '.b:manArgColor
echon "ltrM"
execute 'echohl '.b:manDispColor
echon "."
echo "  And although the obverse is equally valid, left hand side ("
execute 'echohl '.b:manArgColor
echon "lhs"
execute 'echohl '.b:manDispColor
echon ") use can"
echo "  cause problems:"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "let"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:3:2:2:"
execute 'echohl '.b:manCmdColor
echon "="
execute 'echohl '.b:manEmphColor
echon "ltrM"
execute 'echohl '.b:manDispColor
echo " "
echo "  from the example, there is no "
execute 'echohl '.b:manArgColor
echon "b:array:3:2:2:"
execute 'echohl '.b:manDispColor
echon " element in the array.  It"
echo "  is, however, created outside the bounds of the array.  There is an"
echo "  alternative way to handle this, with bounds checking.  This will be"
echo "  addressed further on in this discussion.  For right now, just remember,"
echo "  "
execute 'echohl '.b:manArgColor
echon "rhs"
execute 'echohl '.b:manDispColor
echon " == "
echohl Safe
echon "safe"
execute 'echohl '.b:manDispColor
echon ", "
execute 'echohl '.b:manArgColor
echon "lhs"
execute 'echohl '.b:manDispColor
echon " == "
echohl Risky
echon "risky"
execute 'echohl '.b:manDispColor
echon "."
Divider
echo "  Now that an array has been created, how do we change values within the"
echo "  array?  The "
execute 'echohl '.b:manCmdColor
echon "ARRAYSET"
execute 'echohl '.b:manDispColor
echon " command is used for this.  With this command,"
echo "  single elements as well as sub arrays and entire arrays can be set."
echo "  The syntax is:"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYSET"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "decl"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "val"
execute 'echohl '.b:manDispColor
echon " ["
execute 'echohl '.b:manArgColor
echon "s"
execute 'echohl '.b:manDispColor
echon "]"
echo " "
echo "  "
execute 'echohl '.b:manArgColor
echon "decl"
execute 'echohl '.b:manDispColor
echon " has the same usage as in ARRAYNEW, as does "
execute 'echohl '.b:manArgColor
echon "val"
execute 'echohl '.b:manDispColor
echon ", being the"
echo "  equivalent of "
execute 'echohl '.b:manArgColor
echon "init"
execute 'echohl '.b:manDispColor
echon " in that command.  The optional argument, "
execute 'echohl '.b:manArgColor
echon "s"
execute 'echohl '.b:manDispColor
echon ","
echo "  likewise has the same usage when "
execute 'echohl '.b:manArgColor
echon "val"
execute 'echohl '.b:manDispColor
echon " is a string.  Again, some"
echo "  examples:"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYSET"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "1,way,||,another"
execute 'echohl '.b:manDispColor
echo " "
echo "  Sets the array to the specified values  .In this case, only one value,"
echo "  and the whole array is specified, so the first element of the array is"
echo "  set."
echo " "
echo "  With "
execute 'echohl '.b:manCmdColor
echon "ARRAYSET"
execute 'echohl '.b:manDispColor
echon ", "
execute 'echohl '.b:manArgColor
echon "decl"
execute 'echohl '.b:manDispColor
echon " can also specify an element or a sub array."
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYSET"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:1:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "1,way,||,another"
execute 'echohl '.b:manDispColor
echo " "
echo "  sets elements "
execute 'echohl '.b:manEmphColor
echon "1:0:0:"
execute 'echohl '.b:manDispColor
echon " thru "
execute 'echohl '.b:manEmphColor
echon "1:1:0:"
execute 'echohl '.b:manDispColor
echon ", with "
execute 'echohl '.b:manEmphColor
echon "0:0:0:"
execute 'echohl '.b:manDispColor
echon " thru "
execute 'echohl '.b:manEmphColor
echon "0:1:2:"
execute 'echohl '.b:manDispColor
echon " and "
execute 'echohl '.b:manEmphColor
echon "1:1:1:"
execute 'echohl '.b:manDispColor
echon " and"
echo "  "
execute 'echohl '.b:manEmphColor
echon "1:1:2:"
execute 'echohl '.b:manDispColor
echon " defaulting to "
execute 'echohl '.b:manEmphColor
echon "<Nul>"
execute 'echohl '.b:manDispColor
echon "."
echo " "
echo "  To set a single element, just specify the element as "
execute 'echohl '.b:manArgColor
echon "decl"
execute 'echohl '.b:manDispColor
echon " and give it"
echo "  a "
execute 'echohl '.b:manArgColor
echon "val"
execute 'echohl '.b:manDispColor
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYSET"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:1:1:2:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "1\\ way\\ ||\\ another"
execute 'echohl '.b:manDispColor
echo " "
echo "  sets the element and checks bounds to assure it is in the array.  This"
echo "  obviates the "
execute 'echohl '.b:manArgColor
echon "lhs"
execute 'echohl '.b:manDispColor
echon " problem in expression assignments."
Divider
echo "  You can retrieve array elements or sub arrays or entire arrays using"
echo "  "
execute 'echohl '.b:manCmdColor
echon "ARRAYGET"
execute 'echohl '.b:manDispColor
echon ".  The syntax is"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYGET"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "decl"
execute 'echohl '.b:manDispColor
echon " ["
execute 'echohl '.b:manArgColor
echon "var"
execute 'echohl '.b:manDispColor
echon "]"
echo " "
echo "  "
execute 'echohl '.b:manArgColor
echon "var"
execute 'echohl '.b:manDispColor
echon " is an optional variable or list of variables in which array element"
echo "  values are to be placed.  If it is not specified, the values are"
echo "  displayed on the command line.  A simple example would be:"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYGET"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "g:status:3:1:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:current"
execute 'echohl '.b:manDispColor
echo " "
echo "  This gets the 4th row, second element (assuming a 2 dimensional array"
echo "  4 X 2) from the array and places it in the argument variable.  This is"
echo "  equivalent to:"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "let"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:current"
execute 'echohl '.b:manCmdColor
echon "="
execute 'echohl '.b:manArgColor
echon "g:status:3:1:"
execute 'echohl '.b:manDispColor
echo " "
echo "  Although you can use individual array elements as the "
execute 'echohl '.b:manArgColor
echon "rhs"
execute 'echohl '.b:manDispColor
echon " of an"
echo "  expression, assignment of multiple array elements can be a tedious"
echo "  task.  "
execute 'echohl '.b:manCmdColor
echon "ARRAYGET"
execute 'echohl '.b:manDispColor
echon " simplifies this by accepting a comma separated list,"
echo "  "
execute 'echohl '.b:manArgColor
echon "var"
execute 'echohl '.b:manDispColor
echon ", of variables and assigning successive elements of "
execute 'echohl '.b:manArgColor
echon "decl"
execute 'echohl '.b:manDispColor
echon " to them."
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYGET"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:addrBook:2:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:name,b:address,b:phone"
execute 'echohl '.b:manDispColor
echo " "
echo "  This one statement replaces 3 let statements, retrieving the name,"
echo "  address, and phone from the third row in an address book array."
Divider
echo "  You can make copies of arrays and sub arrays with the "
execute 'echohl '.b:manCmdColor
echon "ARRAYCPY"
execute 'echohl '.b:manDispColor
echon " command."
echo "  Its syntax is:"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYCPY"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "srcdecl"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "dstdecl"
execute 'echohl '.b:manDispColor
echo " "
echo "  For example, the command"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYCPY"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:arycpy:"
execute 'echohl '.b:manDispColor
echo " "
echo "  copies "
execute 'echohl '.b:manEmphColor
echon "b:array:"
execute 'echohl '.b:manDispColor
echon " to "
execute 'echohl '.b:manEmphColor
echon "b:arycpy:"
execute 'echohl '.b:manDispColor
echon ", while"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYCPY"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:0:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:subarycpy:"
execute 'echohl '.b:manDispColor
echo " "
echo "  copies the sub array "
execute 'echohl '.b:manEmphColor
echon "b:array:0:"
execute 'echohl '.b:manDispColor
echon " to "
execute 'echohl '.b:manEmphColor
echon "b:subarycpy:"
execute 'echohl '.b:manDispColor
echo " "
echo "  Think of "
execute 'echohl '.b:manCmdColor
echon "ARRAYCPY"
execute 'echohl '.b:manDispColor
echon " as an "
execute 'echohl '.b:manCmdColor
echon "ARRAYGET"
execute 'echohl '.b:manDispColor
echon " for arrays, or, what "
execute 'echohl '.b:manCmdColor
echon "let"
execute 'echohl '.b:manDispColor
echon " would do if"
echo "  vim recognized arrays."
Divider
echo "  The dimension of an array can be obtained through the command "
execute 'echohl '.b:manCmdColor
echon "ARRAYDIM."
execute 'echohl '.b:manDispColor
echo "  A string of the form 'size X size X size...' is returned."
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYDIM"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:"
execute 'echohl '.b:manDispColor
echo " "
echo "  would return '"
execute 'echohl '.b:manEmphColor
echon "1 X 2 X 3"
execute 'echohl '.b:manDispColor
echon "' for an array created with"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYNEW"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:arrray:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "1:2:3:"
execute 'echohl '.b:manDispColor
echo " "
echo "  while"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYDIM"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "b:array:0:"
execute 'echohl '.b:manDispColor
echo " "
echo "  would return '"
execute 'echohl '.b:manEmphColor
echon "2 X 3"
execute 'echohl '.b:manDispColor
echon "' for the same array."
Divider
echo "  Lastly, to delete an array use "
execute 'echohl '.b:manCmdColor
echon "ARRAYDEL"
execute 'echohl '.b:manDispColor
echon ".  The syntax is:"
echo " "
echo "       "
execute 'echohl '.b:manCmdColor
echon "ARRAYDEL"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "decl"
execute 'echohl '.b:manDispColor
echo " "
echo "  "
execute 'echohl '.b:manEmphColor
echon "NOTE:"
execute 'echohl '.b:manDispColor
echo "     Only arrays, not sub arrays, may be deleted.  This is because"
echo "     deletion of a sub array could cause the resultant array to be"
echo "     asymmetrical."
Header
echo "  Let's put it all together.  This is an example of using "
execute 'echohl '.b:manEmphColor
echon "array.vim"
execute 'echohl '.b:manDispColor
echo "  commands to implement an address book array in a vim script."
echo " "
echo "  First create the array with 3 dimensions.  The first will be the number"
echo "  of entries.  The second will be addresses, and the third will be phone"
echo "  numbers.  We'll have a home address and a business address to put in the"
echo "  second dimension.  For phones, we want to be able to contact these"
echo "  people almost anywhere, so we'll have 3 phone numbers: business, cell,"
echo "  and home."
echo " "
echo "  This translates to an X:2:3: array size.  For 'X' we'll use 10, to keep"
echo "  track of our ten most contacted people (important contacts)."
echo " "
execute 'echohl '.b:manCmdColor
echo "ARRAYNEW"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "g:addrbk:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "10:2:3:"
execute 'echohl '.b:manDispColor
execute 'echohl '.b:manArgColor
echo "  \\ Dave,1010\\ Silicon\\ Way,123\\ Elm\\ St,5552447\\ x300,5552355,5554663,"
echo "  \\John,1010\\ Silicon\\ Way,986\\ Walnut\\ Dr,5552447\\ x304,5551776,5552004,"
echo "  \\Frank,1180\\ Industry\\ Park,836\\ Cherry\\ Av,5551212,5552355,5554663,"
echo "  \\Harry,1180\\ Industry\\ Park,7734\\ Dogwood,5551212,<Nul>,5553320"
execute 'echohl '.b:manDispColor
echo " "
echo "  This gives us a new global array with 4 initial entries in "
execute 'echohl '.b:manEmphColor
echon "g:addrbk:"
execute 'echohl '.b:manDispColor
echon "."
echo "  We add a receptionist who doesn't give out her home address, has no"
echo "  cell phone, and doesn't want her home phone advertised."
echo " "
execute 'echohl '.b:manCmdColor
echo "ARRAYSET"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "g:addrbk:4:"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "Debbie,1010\\ Silicon\\ Way,<Nul>,5552447\\ x314"
execute 'echohl '.b:manDispColor
echo " "
echo "  Now we could define commands or functions to access these entries (and"
echo "  probably would), and they'd all use ARRAYGET to access the information."
echo "  However, for brevity's sake, here we'll just use the command directly."
echo "  We need to get in touch with Frank, row index 2 in the array."
echo " "
execute 'echohl '.b:manCmdColor
echo "ARRAYGET"
execute 'echohl '.b:manDispColor
echon " "
execute 'echohl '.b:manArgColor
echon "g:addrbk:2:"
execute 'echohl '.b:manDispColor
echo " "
echo "  This would display"
echo " "
execute 'echohl '.b:manEmphColor
echo "- Frank - 1180 Industry Park - 836 Cherry Ave. - 5551212 - 5552355 - 5554663 -"
execute 'echohl '.b:manDispColor
echo " "
echo "   To get just phones"
echo " "
execute 'echohl '.b:manCmdColor
echo "ARRAYGET"
execute 'echohl '.b:manDispColor
echon " "
echon "g:addrbk:2:1:"
execute 'echohl '.b:manDispColor
echo " "
echo "  which returns"
echo " "
execute 'echohl '.b:manEmphColor
echo "- 5551212 - 5552355 - 5554663 -"
execute 'echohl '.b:manDispColor
echo " "
echo "   To get his business address"
echo " "
execute 'echohl '.b:manCmdColor
echo "ARRAYGET"
execute 'echohl '.b:manDispColor
echon " "
echon "g:addrbk:2:0:1:"
execute 'echohl '.b:manDispColor
echo " "
echo "  which returns"
echo " "
execute 'echohl '.b:manEmphColor
echo "- 1180 Industry Park -"
execute 'echohl '.b:manDispColor
echo " "
echo "  And so on."
echo " "
echo "  There is a sample file, "
execute 'echohl '.b:manEmphColor
echon "example/addrbook.vim"
execute 'echohl '.b:manDispColor
echon ", included with this"
echo "  package that illustrates this example along with suggested commands"
echo "  and a function for accessing the array."
Header
execute 'echohl '.b:manCmdColor
echo "     This section just deals with some miscellany, partly about the"
echo "     function interface, but also about the buffer variables that can be"
echo "     used to control various aspects of "
execute 'echohl '.b:manEmphColor
echon "array.vim"
execute 'echohl '.b:manCmdColor
echon " behavior.  It will be"
echo "     quite short, further information can be gleaned from perusing"
echo "     "
execute 'echohl '.b:manEmphColor
echon "array.vim"
execute 'echohl '.b:manCmdColor
echon "."
execute 'echohl '.b:manDispColor
echo " "
echo "  For each command there is a corresponding function which is lower case"
echo "  excepting the first letter, and the first letter of the command acronym."
echo "  E.G., for "
execute 'echohl '.b:manCmdColor
echon "ARRAYGET"
execute 'echohl '.b:manDispColor
echon ", the corresponding function is "
execute 'echohl '.b:manCmdColor
echon "ArrayGet()"
execute 'echohl '.b:manDispColor
echon "."
echo " "
echo "  The command mechanism in vim passes arguments to functions enclosed in"
echo "  quotes.  You will have to mimic this behavior to use the functions."
echo " "
echo "  Because arguments are quoted, you should dereference variables to their"
echo "  constituent parts before quoting and passing."
echo " "
echo "  The following variables can be assigned values to control some aspects"
echo "  of function behavior."
echo " "
execute 'echohl '.b:manCmdColor
echo "  g:arrayInitVal"
execute 'echohl '.b:manDispColor
echo "       specifies the value to be placed in non-initialized array elements."
echo " "
execute 'echohl '.b:manCmdColor
echo "  g:arrayVerboseMsg"
execute 'echohl '.b:manDispColor
echo "       if zero, turns off messages and warnings, default is one."
echo " "
echo "  Other buffer variables exist which control display colors, see script."
Header
echohl None

delcommand Header
delcommand Divider
" vim:filetype=vim:comments+=\:echo\ \":formatoptions+=t1:formatoptions-=l:textwidth=81
